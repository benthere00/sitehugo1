name: Build and Deploy Hugo Site

env:
  DEBUG: false
  TZ: Asia/Manila
  PRODUCTION_BRANCH: master
  STAGING_BRANCH: staging
  SITE_URL: ${{ vars.SITE_URL }}
  SERVER_HOST: ${{ vars.SERVER_HOST }}
  SERVER_PORT: ${{ vars.SERVER_PORT }}
  SERVER_USER: ${{ vars.SERVER_USER }}
  FILE_PATH: ${{ vars.FILE_PATH }} # must exists
on:
  push:
    branches:
      - staging
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Git checkout
      uses: actions/checkout@v3
      with:
          submodules: 'recursive'  # Fetch Hugo themes and posts
          fetch-depth: 0    # Fetch all history for .GitInfo, refs and .Lastmod
          ref: ${{ github.head_ref }}
          token: ${{secrets.ACCESS_TOKEN_CLASSIC}}

    - name: Time Check
      run: |
        echo "The time is: $(date)"
        echo "The Timezone:"
        timedatectl
    - name: Sync Prod and Staging to Avoid Conflict
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        # git checkout $STAGING_BRANCH
        # git pull --no-edit origin $STAGING_BRANCH
        # # Switch to prod
        git checkout $PRODUCTION_BRANCH
        git config pull.rebase false
        git pull --no-edit origin $PRODUCTION_BRANCH
        # not necessary (maybe)
        git pull --no-edit origin $STAGING_BRANCH
        git merge --strategy-option=theirs --no-edit $STAGING_BRANCH

    # - name: Initialize and Update Submodules
    #   run: |
    #     git submodule init
    #     echo "Pull from submodules from remote.."
    #     git submodule update --recursive --remote

    - name: Setup Hugo Compiler
      uses: peaceiris/actions-hugo@v2
      with:
        hugo-version: latest
        extended: true

    - name: Procces Newly New/Modified .md Files From content/post
      run: |
        CWD=$(pwd)
        echo "The current working directory.."
        echo $CWD
        modified_md_files="$(git diff --submodule=diff | awk '/^\+\+\+ b\/content\/.*\.md$/ {print substr($2,3)}')"
        echo "Checking new/modified files contents.."
        echo $modified_md_files
        echo "Loop starts, working on the new or modified post.."
        if [ -n "$modified_md_files" ]; then
          for file in $modified_md_files; do
            filename=$(basename "$file")
            echo "Checking file called: $filename"
            # create post if it does not exist, otherwise merge it
            if [[ "$filename" == "README.md" ]]; then
              echo "Deleting README.md file.."
              rm "$file"
            fi
          done
        else
          echo "No new or modified post is found, skipping.."
        fi
    - name: Clean Public Directory and Commit Changes
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        # git reset HEAD ./public
        # git checkout -- ./public
        if [ -d "./public" ]; then
          find ./public ! -name '.gitignore' -delete 2>/dev/null || true
        else
          mkdir ./public
        fi
        git add -A
        git commit -m "Bot syncs Staging & Production branch at $(date +%s)" || true
        git push origin $PRODUCTION_BRANCH

    - name: Check folders and files for Diagnostics
      run: |
        CWD=$(pwd)
        echo "Current path, files, and folders"
        pwd & ls -lah
        echo "List content/posts"
        ls -lah "$CWD/content/posts"
        echo "Public folder must be clean at this stage"
        ls -lah "$CWD/public" || true
        echo "cat config.toml"
        cat "$CWD/config.toml"

    - name: Build Hugo website
      # if: github.ref == refs/heads/${{ env.PRODUCTION_BRANCH }}
      run: hugo --minify --environment production -D

    - name: Add Public Directory and Commit Changes
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git checkout $PRODUCTION_BRANCH
        git add -A
        git commit -m "Bot deploy website at $(date +%s)"
        git push origin $PRODUCTION_BRANCH
#
#    - name: Push changes to the Production
#      uses: ad-m/github-push-action@master
#      with:
#        # branch: ${{ github.head_ref }} # if current branch
#        branch: ${{ env.PRODUCTION_BRANCH }}
#        github_token: ${{ secrets.ACCESS_TOKEN_CLASSIC }}
#
    # File Transfer to Linux Server
    - name: File Transfer to Linux Server
      uses: appleboy/scp-action@master
      with:
        host: ${{ env.SERVER_HOST }}
        port: ${{ env.SERVER_PORT }}
        username: ${{ env.SERVER_USER }}
        timeout: 15s
        # password: ${{ secrets.SERVER_PASSWORD }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "public/*,!public/.*" # with . ignore list
        # source: "./public" # with . ignore list
        target: ${{ env.FILE_PATH }}
        rm: true # default: false !Careful, the target folder will be removed

    # Deploy to Debian Server and NGINX Restart
    - name: Debian Server - Restarting NGINX Docker
      uses: appleboy/ssh-action@master
      env:
        FILE_PATH: ${{ env.FILE_PATH }}
      with:
        host: ${{ env.SERVER_HOST }}
        port: ${{ env.SERVER_PORT }}
        username: ${{ env.SERVER_USER }}
        timeout: 10s
        # password: ${{ secrets.SERVER_PASSWORD }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        envs: FILE_PATH
        script: |
          whoami
          cd $FILE_PATH && pwd && ls -lah
          cd ..
          rm -r ./prod/public || true
          cp -r ./tmp/public ./prod/public
          docker-compose up -d && docker-compose restart
    
    # Check Website if Running
    - name: Is Website Down?
      run: |
        sleep 1
        response=`curl --write-out %{http_code} \
          --silent \
          --output /dev/null \
          --url ${{ env.SITE_URL }}`
        if [ "$response" != "200" ]; then
          echo "Website is down (status code: $response)"
          exit 1
        else
          echo "Site URL: ${{ env.SITE_URL }}"
          echo "Congratulations! The website is up and running!"
        fi

    # Deploy to Github Pages
    # - name: Deploy site
    #   uses: peaceiris/actions-gh-pages@v3
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     publish_dir: ./public